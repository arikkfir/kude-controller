version: '3'

output: prefixed

vars:
  GOPATH:
    sh: go env GOPATH
  RESOLVED_K8S_VERSION: '{{.K8S_VERSION | default "1.25.0"}}'
  RESOLVED_VERSION: '{{.VERSION | default "0.0.0-dev"}}'

tasks:

  download-go-deps:
    desc: Download Go source code dependencies.
    sources: [ go.mod, go.sum ]
    cmds: [ go mod download ]

  controller-gen:
    desc: Install controller-gen tool.
    generates: [ '{{.GOPATH}}/bin/controller-gen' ]
    status: [ 'test -f {{.GOPATH}}/bin/controller-gen' ]
    vars:
        VVV: '{{.CONTROLLER_GEN_VERSION | default "0.9.2"}}'
    cmds: [ 'go install sigs.k8s.io/controller-tools/cmd/controller-gen@v{{.VVV}}' ]

  codegen:
    desc: Generate Kubernetes CRDs and Go code.
    deps: [ controller-gen, download-go-deps ]
    sources:
      - doc.go
      - go.*
      - cmd/**/*
      - internal/**/*
      - scripts/objecter/*
    generates:
      - chart/crds/*.yaml
      - chart/templates/role.yaml
      - internal/**/*_object.go
    cmds:
      - go generate ./...

  setup-envtest:
    desc: Install envtest tool.
    vars:
      GOARCH:
        sh: go env GOARCH
      GOOS:
        sh: go env GOOS
    generates: [ '{{.GOPATH}}/bin/setup-envtest', './bin/k8s/{{.RESOLVED_K8S_VERSION}}-{{.GOOS}}-{{.GOARCH}}/**' ]
    status:
      - test -f {{.GOPATH}}/bin/setup-envtest
      - test -f ./bin/k8s/{{.RESOLVED_K8S_VERSION}}-{{.GOOS}}-{{.GOARCH}}/etcd
      - test -f ./bin/k8s/{{.RESOLVED_K8S_VERSION}}-{{.GOOS}}-{{.GOARCH}}/kube-apiserver
      - test -f ./bin/k8s/{{.RESOLVED_K8S_VERSION}}-{{.GOOS}}-{{.GOARCH}}/kubectl
    cmds:
      - go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
      - setup-envtest use {{.RESOLVED_K8S_VERSION}} --bin-dir=./bin

  test:
    desc: Verify Go code & and run all unit & integration tests.
    deps: [ setup-envtest, download-go-deps ]
    sources:
      - doc.go
      - go.*
      - cmd/**/*
      - internal/**/*
    generates:
      - coverage.txt
    cmds:
      - go vet ./...
      - go test
          -ldflags "-X 'github.com/arikkfir/kude-controller/internal.versionString={{.RESOLVED_VERSION}}'"
          -v
          -vet=off
          -race
          -coverprofile=coverage.txt
          -covermode=atomic
          ./...

  start-minikube:
    desc: Start a local Minikube Kubernetes cluster.
    status:
      - "minikube status -p kude-controller | grep -q 'host: Running'"
    cmds:
      - minikube start --cpus=2
        --delete-on-failure=true
        --disk-size=20g
        --keep-context=true
        --kubernetes-version={{.RESOLVED_K8S_VERSION}}
        --memory=2g
        --nodes=1
        --profile=kude-controller

  uninstall-from-minikube:
    desc: Uninstall Kude Controller from Minikube.
    ignore_error: true
    cmds:
      - helm --kube-context=kude-controller -n kude uninstall kude-controller --wait
      - kubectl patch -f test/resources.yaml --type=json --patch='[{"op":"remove","path":"/metadata/finalizers"}]'
      - kubectl delete -f ./test/resources.yaml
      - kubectl delete -f ./test/rbac.yaml
      - kubectl delete namespace kude

  run:
    desc: Run a local Kubernetes cluster and deploy current code into it.
    deps: [ start-minikube ]
    sources:
      - chart/**/*
      - cmd/**/*
      - internal/**/*
      - test/**/*
      - doc.go
      - Dockerfile
      - go.mod
      - go.sum
    cmds:
      - defer: rm -vf ./kude-controller-{{.VERSION_AND_BUILD}}.tgz
      - task: uninstall-from-minikube
      - |
        eval $(minikube -p kude-controller docker-env)
        DOCKER_BUILDKIT=1 docker build -f Dockerfile -t ghcr.io/arikkfir/kude-controller:local .
      - helm package ./chart --app-version={{.RESOLVED_VERSION}} --destination=. --version={{.RESOLVED_VERSION}}
      - helm --kube-context=kude-controller --namespace=kude install --create-namespace --atomic --wait-for-jobs kude-controller ./kude-controller-{{.VERSION_AND_BUILD}}.tgz
      - kubectl create -f ./test/rbac.yaml
      - kubectl create -f ./test/resources.yaml
      - kubectl --context=kude-controller -n kude wait --for=condition=available --timeout=60s gitrepositories.kude.kfirs.com/kude-controller-main
      - kubectl --context=kude-controller -n kude wait --for=condition=uptodate --timeout=60s kubectlbundles.kude.kfirs.com/kubectl-bundle
